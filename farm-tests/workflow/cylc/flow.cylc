[scheduler]
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            iperf_server => iperf_client => prometheus_server
        """

[runtime]
    [[root]]
        # Common settings for all tasks
        platform = jlab_slurm
        [[[job]]]
            execution time limit = PT2H    # 2 hours timeout
        
        [[[directives]]]
            --ntasks = 1
            --cpus-per-task = 4
            --mem = 8G
            --partition = ifarm
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            # Ports configuration
            PROCESS_EXPORTER_PORT = "32801"
            APP_PORT = "32901"
            
            CONFIG_DIR = "$CYLC_WORKFLOW_RUN_DIR/etc/config"
            PROCESS_EXPORTER_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/process-exporter.sif"
            PROMETHEUS_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/prom.sif"
            # IPERF3_PATH = "/home/tsai/jeng/iperf3/iperf3_latest.sif"
            IPERF3_PATH = "/home/tsai/jeng/iperf3/bin/iperf3"
            IPERF3_LIB_PATH = "/home/tsai/jeng/iperf3/lib"
 

            # Path to iperf3 binary

            # iperf3 shell scripts
            IPERF3_SERVER_SCRIPT = "$CYLC_WORKFLOW_RUN_DIR/scripts/ifarm_iperf3Server.sh"
            IPERF3_CLIENT_SCRIPT = "$CYLC_WORKFLOW_RUN_DIR/scripts/ifarm_iperf3Client.sh"

            # prometheus shell script
            PROM_SERVER_SCRIPT = "$CYLC_WORKFLOW_RUN_DIR/scripts/prom_server.sh"

    [[iperf_server]]
        script = """
            # Store hostname for other tasks
            echo "$(hostname)" > $CYLC_WORKFLOW_SHARE_DIR/server_hostname   
            echo "Current working directory: $(pwd)"
            
            # Start the iperf server in background
            bash $IPERF3_SERVER_SCRIPT \
                "${PROCESS_EXPORTER_PORT}" \
                "${APP_PORT}" \
                "${CYLC_TASK_WORK_DIR}" \       
                "${PROCESS_EXPORTER_SIF}" \
                "${IPERF3_PATH}" \
                "${IPERF3_LIB_PATH}" \
                "${CONFIG_DIR}" 2>&1 &
            
            # Store the PID
            SERVER_PID=$!
            
            # Wait for server to start listening (max 30 seconds)
            COUNTER=0
            while ! netstat -tuln | grep ":${APP_PORT}" > /dev/null; do
                sleep 1
                ((COUNTER++))
                if [ $COUNTER -ge 30 ]; then
                    echo "ERROR: iperf server failed to start within 30 seconds"
                    kill $SERVER_PID
                    exit 1
                fi
                # Print status every 5 seconds
                if [ $((COUNTER % 5)) -eq 0 ]; then
                    echo "Waiting for iperf server to start... (${COUNTER}s)"
                    echo "Current ports in use:"
                    netstat -tuln
                    echo "Process status:"
                    ps -f -p $SERVER_PID
                fi
            done
            
            echo "iperf server is running and listening on port ${APP_PORT}"
            
            # Write PID to a file so we can terminate it later if needed
            echo $SERVER_PID > $CYLC_WORKFLOW_SHARE_DIR/iperf_server.pid
            
            # Monitor both the iperf server and process-exporter
            while kill -0 $SERVER_PID 2>/dev/null; do
                # Check if process-exporter is running
                if ! curl -s http://localhost:${PROCESS_EXPORTER_PORT}/metrics > /dev/null; then
                    echo "ERROR: Process-exporter is not responding"
                    echo "Diagnostic information:"
                    ps aux | grep process-exporter
                    netstat -tuln | grep ${PROCESS_EXPORTER_PORT}
                    exit 1
                fi
                
                # Check if iperf3 is still listening
                if ! netstat -tuln | grep ":${APP_PORT}" > /dev/null; then
                    echo "ERROR: iperf3 server is no longer listening on port ${APP_PORT}"
                    exit 1
                fi
                
                sleep 5
            done
            
            # If we get here, the server process has died
            echo "ERROR: iperf server process has terminated unexpectedly"
            exit 1
        """
        [[[directives]]]
            --job-name = iperf-server
            --output = iperf_test_server_%j.log
            --error = iperf_test_server_%j.log

        [[[environment]]]
            CYLC_TASK_MESSAGE_PRIORITY = "WARNING"


        

    [[iperf_client]]
        script = """
            SERVER_HOSTNAME=$(cat $CYLC_WORKFLOW_SHARE_DIR/server_hostname)
            echo "$(hostname)" > $CYLC_WORKFLOW_SHARE_DIR/client_hostname
            
            # Test connection to server before starting client
            COUNTER=0
            while ! nc -z $SERVER_HOSTNAME ${APP_PORT}; do
                sleep 1
                ((COUNTER++))
                if [ $COUNTER -ge 30 ]; then
                    echo "ERROR: Cannot connect to iperf server at ${SERVER_HOSTNAME}:${APP_PORT}"
                    exit 1
                fi
            done
            
            echo "Successfully connected to iperf server at ${SERVER_HOSTNAME}:${APP_PORT}"
            
            # Start the client
            bash $IPERF3_CLIENT_SCRIPT \
                "${PROCESS_EXPORTER_PORT}" \
                "${SERVER_HOSTNAME}" \      
                "${APP_PORT}" \
                "${CYLC_TASK_WORK_DIR}" \
                "${PROCESS_EXPORTER_SIF}" \
                "${IPERF3_PATH}" \
                "${IPERF3_LIB_PATH}" \
                "3600" \
                "${CONFIG_DIR}"
        """
        [[[directives]]]
            --job-name = iperf-client
            --output = iperf_test_client_%j.log
            --error = iperf_test_client_%j.log

    [[prometheus_server]]
        script = """
                # Generate Prometheus config
                SERVER_HOSTNAME=$(cat $CYLC_WORKFLOW_SHARE_DIR/server_hostname)
                CLIENT_HOSTNAME=$(cat $CYLC_WORKFLOW_SHARE_DIR/client_hostname)
                
                # Create timestamp for data directory
                PROM_DATA_DIR="prom-data-$(date +%s)"
                
                # Ensure directories exist
                mkdir -p "${CYLC_TASK_WORK_DIR}/${PROM_DATA_DIR}"
                
                # Create prometheus config file directly
                cat > "${CONFIG_DIR}/prometheus-config.yml" << EOF
                global:
                  scrape_interval: 15s
                  external_labels:
                    monitor: 'ifarm-prom-monitor'
                scrape_configs:
                  - job_name: 'process-exporter'
                    static_configs:
                      - targets:
                          - '${SERVER_HOSTNAME}:${PROCESS_EXPORTER_PORT}'
                          - '${CLIENT_HOSTNAME}:${PROCESS_EXPORTER_PORT}'
                          - 'localhost:${PROCESS_EXPORTER_PORT}'
                        labels:
                          group: 'process-exporter'
                          cluster: 'ifarm'
                  - job_name: 'prometheus'
                    static_configs:
                      - targets: ['localhost:32900']
                        labels:
                          group: 'prometheus'
                          cluster: 'ifarm'
                EOF
                
                bash $PROM_SERVER_SCRIPT \
                    "32900" \
                    "${CYLC_TASK_WORK_DIR}" \
                    "${PROMETHEUS_SIF}" \
                    "${PROM_DATA_DIR}" \
                    "${CONFIG_DIR}"
            """
        [[[directives]]]
            --job-name = prometheus-server
            --output = iperf_test_prom_%j.log
            --error = iperf_test_prom_%j.log
            --cpus-per-task = 2    # Override root setting for less CPU
        