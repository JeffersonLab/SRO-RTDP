[scheduler]
    allow implicit tasks = True
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            # Start chain
            receiver:ready => component_0:ready
            component_0:ready => component_1:ready
            component_1:ready => component_2:ready
            component_2:ready => sender

            # Completion chain (separate from start chain)
            sender:succeeded => !receiver
            receiver:completed
        """

[runtime]
    [[root]]
        # Common settings for all tasks
        platform = jlab_slurm
        [[[job]]]
            execution time limit = PT2H    # 2 hours timeout
        
        [[[directives]]]
            --ntasks = 1
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            # Path to SIF files
            CPU_EMU_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/cpu-emu.sif"
            GPU_PROXY_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/gpu-proxy.sif"
            
            # Configuration file
            CHAIN_CONFIG = "$CYLC_WORKFLOW_RUN_DIR/chain_config.yaml"
            
            # Add local bin to PATH
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
            
            # Set YQ_PATH to ensure we use the local yq
            YQ_PATH = "$CYLC_WORKFLOW_RUN_DIR/bin/yq"

            # Directory paths
            OUTPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_SHARE_DIR/logs"

    [[component_0]]
        [[[outputs]]]
            ready = "ready"
        [[[environment]]]
            # Add local bin to PATH for this task
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
            YQ_PATH = "$CYLC_WORKFLOW_RUN_DIR/bin/yq"
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/component_0

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/component_0/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/component_0/stderr.log")

            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting component 0 of type cpu"

            # CPU component
            apptainer run --pwd /app $CPU_EMU_SIF emulator                 -r 55555                 -i node2                 -p 55556                 -t 1                 -b 100                 -m 0.01                 -o 0.001                 2>${LOG_DIR}/component_0/apptainer.log

            # Signal ready state
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
            cylc message "ready"
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
        """

        [[[directives]]]
            --job-name = component_0
            --partition = ifarm
            --cpus-per-task = 8
            --mem = 16G

    [[component_1]]
        [[[outputs]]]
            ready = "ready"
        [[[environment]]]
            # Add local bin to PATH for this task
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
            YQ_PATH = "$CYLC_WORKFLOW_RUN_DIR/bin/yq"
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/component_1

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/component_1/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/component_1/stderr.log")

            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting component 1 of type gpu"

            # GPU component
            apptainer run --nv --pwd /app $GPU_PROXY_SIF proxy                 -r 55556                 -i node3                 -p 55557                 -w 2048                 -s 25                 -g 2048                 2>${LOG_DIR}/component_1/apptainer.log

            # Signal ready state
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
            cylc message "ready"
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
        """

        [[[directives]]]
            --job-name = component_1
            --partition = gpu
            --cpus-per-task = 4
            --mem = 8G
            --gres = gpu:A100:1

    [[component_2]]
        [[[outputs]]]
            ready = "ready"
        [[[environment]]]
            # Add local bin to PATH for this task
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
            YQ_PATH = "$CYLC_WORKFLOW_RUN_DIR/bin/yq"
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/component_2

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/component_2/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/component_2/stderr.log")

            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting component 2 of type cpu"

            # CPU component
            apptainer run --pwd /app $CPU_EMU_SIF emulator                 -r 55557                 -i None                 -p 55558                 -t 1                 -b 100                 -m 0.01                 -o 0.001                 2>${LOG_DIR}/component_2/apptainer.log

            # Signal ready state
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
            cylc message "ready"
            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
        """

        [[[directives]]]
            --job-name = component_2
            --partition = ifarm
            --cpus-per-task = 8
            --mem = 16G

    [[sender]]
        [[[outputs]]]
            ready = "ready"
            completed = "send_complete"
        [[[environment]]]
            # Add local bin to PATH for this task
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/sender

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/sender/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/sender/stderr.log")

            echo "[\\$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting sender task"
            
            # Create input directory
            mkdir -p ${INPUT_DIR}
            
            # Run sender
            apptainer run --pwd /app $CPU_EMU_SIF sender -i node1 -p 55555 2>${LOG_DIR}/sender/apptainer.log
            
            # Signal completion
            cylc message -- "send_complete"
        """
        [[[directives]]]
            --job-name = sender
            --partition = ifarm
            --cpus-per-task = 8
            --mem = 16G

    [[receiver]]
        [[[outputs]]]
            ready = "ready"
            completed = "Transfer completed successfully"
        [[[environment]]]
            # Add local bin to PATH for this task
            PATH = "$CYLC_WORKFLOW_RUN_DIR/bin:$PATH"
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/receiver

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/receiver/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/receiver/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver task"
            
            # Create output directory
            mkdir -p ${OUTPUT_DIR}
            
            # Start receiver in background
            apptainer run --pwd /app $CPU_EMU_SIF receiver -z -r 55558 > ${OUTPUT_DIR}/received_data.bin 2>${LOG_DIR}/receiver/apptainer.log &
            
            RECV_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver started with PID $RECV_PID"
            
            # Brief pause to let process start
            sleep 2
            
            # Signal readiness if process is running
            if kill -0 $RECV_PID 2>/dev/null; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
                cylc message "ready"
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver process not running" >&2
                cat ${LOG_DIR}/receiver/apptainer.log >&2
                exit 1
            fi
            
            # Create a flag file to indicate we should keep running
            KEEP_RUNNING=1
            trap 'KEEP_RUNNING=0' TERM INT
            
            # Create a flag file to track completion
            COMPLETION_FILE="${CYLC_WORKFLOW_SHARE_DIR}/receiver_complete"
            rm -f "${COMPLETION_FILE}"
            
            # Initialize file size tracking
            PREV_SIZE=0
            if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                PREV_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
            fi
            
            # Monitor the receiver process
            while [ $KEEP_RUNNING -eq 1 ] && kill -0 $RECV_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver process is running (PID: $RECV_PID)"
                echo "Process details:" >> ${LOG_DIR}/receiver/process.log
                ps -fp $RECV_PID >> ${LOG_DIR}/receiver/process.log 2>&1 || true
                
                # Check if data has been received by monitoring file size changes
                CURRENT_SIZE=0
                if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                    CURRENT_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
                fi
                
                if [ $CURRENT_SIZE -gt $PREV_SIZE ] && [ ! -f "${COMPLETION_FILE}" ]; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Data received successfully (size: $CURRENT_SIZE bytes)"
                    echo "Transfer completed successfully"
                    cylc message -- "Transfer completed successfully"
                    touch "${COMPLETION_FILE}"
                fi
                
                PREV_SIZE=$CURRENT_SIZE
                sleep 5
            done
            
            # Check final status
            FINAL_SIZE=0
            if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                FINAL_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
            fi
            
            if [ $FINAL_SIZE -gt 0 ]; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Transfer completed successfully (final size: $FINAL_SIZE bytes)"
                exit 0
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Transfer failed or incomplete" >&2
                echo "Last few lines of apptainer log:" >&2
                tail -n 20 ${LOG_DIR}/receiver/apptainer.log >&2
                exit 1
            fi
        """
        [[[directives]]]
            --job-name = receiver
            --partition = ifarm
            --cpus-per-task = 8
            --mem = 16G
