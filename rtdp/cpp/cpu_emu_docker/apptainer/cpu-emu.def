Bootstrap: docker
From: ubuntu:22.04

%files
    ../cpu_emu.cc /app/
    ../cpu_emu.yaml /app/
    ../buildp /app/

%post
    # Install required build tools and dependencies
    apt-get update && apt-get install -y \
        g++ \
        make \
        time \
        less \
        libzmq3-dev \
        libyaml-dev \
        python3 \
        python3-pip \
        && rm -rf /var/lib/apt/lists/*

    # Install Python ZMQ library
    pip3 install pyzmq

    # Set up application
    cd /app

    # Create Python scripts for sender and receiver
    cat > /app/sender.py << 'EOL'
import zmq
import sys
import time

def send_data(host, port, data):
    context = zmq.Context()
    socket = context.socket(zmq.REQ)
    socket.connect(f"tcp://{host}:{port}")
    socket.send(data)
    reply = socket.recv()
    print(f"Received reply: {reply}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 sender.py HOST PORT")
        sys.exit(1)
    host = sys.argv[1]
    port = sys.argv[2]
    data = sys.stdin.buffer.read()
    send_data(host, port, data)
EOL

    cat > /app/receiver.py << 'EOL'
import zmq
import sys

def receive_data(port, bind_ip="*"):
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind(f"tcp://{bind_ip}:{port}")
    while True:
        message = socket.recv()
        sys.stdout.buffer.write(message)
        sys.stdout.buffer.flush()
        socket.send(b"ACK")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 receiver.py PORT [BIND_IP]")
        sys.exit(1)
    port = sys.argv[1]
    bind_ip = sys.argv[2] if len(sys.argv) > 2 else "*"
    receive_data(port, bind_ip)
EOL

    # Make build script executable and build the application
    chmod +x /app/buildp
    cd /app && ./buildp cpu_emu

    # Create output directory
    mkdir -p /output && chmod 777 /output

    # Create entrypoint script
    cat > /app/entrypoint.sh << 'EOL'
#!/bin/bash
if [ "$1" = "send" ]; then
    shift
    HOST="$1"
    PORT="$2"
    python3 /app/sender.py "$HOST" "$PORT"
elif [ "$1" = "receive" ]; then
    shift
    PORT="$1"
    BIND_IP="${2:-*}"
    python3 /app/receiver.py "$PORT" "$BIND_IP"
else
    # Parse arguments for output directory
    ARGS=("$@")
    OUTPUT_DIR="/output"
    for ((i=0; i<${#ARGS[@]}; i++)); do
        if [ "${ARGS[i]}" = "--output-dir" ]; then
            OUTPUT_DIR="${ARGS[i+1]}"
            unset "ARGS[i]" "ARGS[i+1]"
            break
        fi
    done
    # Remove empty elements and recreate array
    ARGS=("${ARGS[@]}")
    cd "$OUTPUT_DIR" || exit 1
    exec /app/cpu_emu "${ARGS[@]}"
fi
EOL
    chmod +x /app/entrypoint.sh

%environment
    export LC_ALL=C

%runscript
    exec /app/entrypoint.sh "$@" 