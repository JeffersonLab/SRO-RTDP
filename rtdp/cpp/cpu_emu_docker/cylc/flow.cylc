[scheduler]
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            receiver:ready => emulator
            emulator:ready => sender
            sender:succeeded => receiver:done
            receiver:completed => !receiver
        """

[runtime]
    [[root]]
        # Common settings for all tasks
        platform = jlab_slurm
        [[[job]]]
            execution time limit = PT2H    # 2 hours timeout
        
        [[[directives]]]
            --ntasks = 1
            --partition = ifarm
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            # Path to SIF file
            CPU_EMU_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/cpu-emu.sif"
            
            # Network configuration
            RECEIVER_PORT = "50080"
            EMULATOR_PORT = "50888"
            
            # Directory paths
            OUTPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_SHARE_DIR/logs"
            
            # Emulator configuration
            EMU_THREADS = "4"              # Number of processing threads
            EMU_LATENCY = "50"            # Processing latency per GB
            EMU_MEM_FOOTPRINT = "0.05"    # Memory footprint in GB
            EMU_OUTPUT_SIZE = "0.001"     # Output size in GB
            
            # Test data configuration
            TEST_DATA_SIZE = "100M"       # Size of test data to send

    [[receiver]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/receiver

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/receiver/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/receiver/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver task"
            
            # Check if port is already in use
            if netstat -tuln | grep -q ":${RECEIVER_PORT}"; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Port ${RECEIVER_PORT} is already in use" >&2
                netstat -tuln | grep ":${RECEIVER_PORT}" >&2
                exit 1
            fi
            
            # Store hostname for other tasks
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Recording hostname information"
            HOSTNAME=$(hostname -f)  # Use fully qualified hostname
            IP=$(hostname -i | awk '{print $1}')  # Use first IP if multiple
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/receiver_hostname
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/receiver_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP)"
            
            # Create output directory
            mkdir -p ${OUTPUT_DIR}
            
            # Start receiver with debug output
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver process"
            apptainer run --bind ${OUTPUT_DIR}:/output \
                ${CPU_EMU_SIF} receive \
                ${RECEIVER_PORT} \
                "0.0.0.0" > ${OUTPUT_DIR}/received_data.bin 2>${LOG_DIR}/receiver/apptainer.log &
            
            RECV_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver started with PID ${RECV_PID}"
            
            # Wait for port to be ready
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Waiting for port ${RECEIVER_PORT} to be ready"
            COUNTER=0
            while ! netstat -tuln | grep -q ":${RECEIVER_PORT}"; do
                sleep 1
                ((COUNTER++))
                if [ $COUNTER -ge 30 ]; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver failed to start" >&2
                    echo "Last few lines of apptainer log:" >&2
                    tail -n 20 ${LOG_DIR}/receiver/apptainer.log >&2
                    echo "Process status:" >&2
                    ps -fp $RECV_PID >&2 || true
                    echo "Network status:" >&2
                    netstat -tuln >&2
                    kill $RECV_PID 2>/dev/null || true
                    exit 1
                fi
                if ! kill -0 $RECV_PID 2>/dev/null; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver process died" >&2
                    echo "Last few lines of apptainer log:" >&2
                    tail -n 20 ${LOG_DIR}/receiver/apptainer.log >&2
                    exit 1
                fi
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Waiting... ($COUNTER/30)"
            done
            
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Port ${RECEIVER_PORT} is ready"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Network status:"
            netstat -tuln | grep ":${RECEIVER_PORT}" || true
            
            # Signal readiness
            cylc message -- "receiver:ready"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Sent ready message"
            
            # Create a flag file to indicate we should keep running
            KEEP_RUNNING=1
            trap 'KEEP_RUNNING=0' TERM INT
            
            # Create a flag file to track completion
            COMPLETION_FILE="${CYLC_WORKFLOW_SHARE_DIR}/receiver_complete"
            rm -f "${COMPLETION_FILE}"
            
            # Monitor the receiver process
            while [ $KEEP_RUNNING -eq 1 ] && kill -0 $RECV_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver process is running (PID: $RECV_PID)"
                echo "Process details:" >> ${LOG_DIR}/receiver/process.log
                ps -fp $RECV_PID >> ${LOG_DIR}/receiver/process.log 2>&1 || true
                echo "Network status:" >> ${LOG_DIR}/receiver/process.log
                netstat -tuln | grep ":${RECEIVER_PORT}" >> ${LOG_DIR}/receiver/process.log 2>&1 || true
                
                # Check if data has been received (file size > 0)
                if [ -s "${OUTPUT_DIR}/received_data.bin" ] && [ ! -f "${COMPLETION_FILE}" ]; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Data received successfully"
                    cylc message -- "receiver:completed"
                    touch "${COMPLETION_FILE}"
                fi
                
                sleep 5
            done
            
            # Check final status
            if [ -s "${OUTPUT_DIR}/received_data.bin" ]; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Transfer completed successfully"
                exit 0
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Transfer failed or incomplete" >&2
                echo "Last few lines of apptainer log:" >&2
                tail -n 20 ${LOG_DIR}/receiver/apptainer.log >&2
                exit 1
            fi
        """
        [[[directives]]]
            --job-name = cpu-emu-recv
            --cpus-per-task = 4
            --mem = 8G
        
        [[[outputs]]]
            ready = "receiver:ready"
            completed = "Transfer completed successfully"
            done = "sender:succeeded"

    [[emulator]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/emulator

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/emulator/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/emulator/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting emulator task"
            
            # Get receiver information
            RECV_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/receiver_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver IP: ${RECV_IP}"
            
            # Store hostname for sender
            HOSTNAME=$(hostname)
            IP=$(hostname -i)
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/emulator_hostname
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/emulator_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP)"
            
            # Create output directory
            mkdir -p ${OUTPUT_DIR}
            
            # Start CPU emulator
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting CPU emulator"
            apptainer run --bind ${OUTPUT_DIR}:/output \
                ${CPU_EMU_SIF} --output-dir /output \
                -t ${EMU_THREADS} -b ${EMU_LATENCY} \
                -m ${EMU_MEM_FOOTPRINT} -o ${EMU_OUTPUT_SIZE} \
                -r ${EMULATOR_PORT} -p ${RECEIVER_PORT} \
                -i ${RECV_IP} -v 1 &
            
            EMU_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Emulator started with PID ${EMU_PID}"
            
            # Wait for port to be ready
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Waiting for port ${EMULATOR_PORT} to be ready"
            COUNTER=0
            while ! netstat -tuln | grep -q ":${EMULATOR_PORT}"; do
                sleep 1
                ((COUNTER++))
                if [ $COUNTER -ge 30 ]; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Emulator failed to start" >&2
                    kill $EMU_PID
                    exit 1
                fi
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Waiting... ($COUNTER/30)"
            done
            
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Port ${EMULATOR_PORT} is ready"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Network status:"
            netstat -tuln | grep ":${EMULATOR_PORT}" || true
            
            # Signal readiness
            cylc message -- "emulator:ready"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Sent ready message"
            
            # Monitor memory usage
            while kill -0 $EMU_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Memory usage:" >> ${LOG_DIR}/emulator/memory.log
                free -h >> ${LOG_DIR}/emulator/memory.log
                ps -o pid,ppid,%cpu,%mem,cmd -p $EMU_PID >> ${LOG_DIR}/emulator/memory.log
                sleep 5
            done
            
            # Check if process died unexpectedly
            if ! wait $EMU_PID; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Emulator process failed" >&2
                exit 1
            fi
        """
        [[[directives]]]
            --job-name = cpu-emu
            --cpus-per-task = 4
            --mem = 16G
        
        [[[outputs]]]
            ready = "emulator:ready"

    [[sender]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/sender

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/sender/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/sender/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting sender task"
            
            # Get emulator information
            EMU_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/emulator_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Emulator IP: ${EMU_IP}"
            
            # Create input directory
            mkdir -p ${INPUT_DIR}
            
            # Generate test data
            INPUT_FILE="${INPUT_DIR}/random_data.bin"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Generating test data: ${TEST_DATA_SIZE}"
            dd if=/dev/urandom bs=${TEST_DATA_SIZE} count=1 of=${INPUT_FILE} 2>/dev/null
            
            # Send data
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Sending data to ${EMU_IP}:${EMULATOR_PORT}"
            apptainer run --bind ${INPUT_DIR}:/data \
                ${CPU_EMU_SIF} send \
                "/data/$(basename ${INPUT_FILE})" \
                ${EMU_IP} \
                ${EMULATOR_PORT}
            
            SEND_STATUS=$?
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Send completed with status: ${SEND_STATUS}"
            
            # Clean up
            rm -f ${INPUT_FILE}
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Cleaned up input file"
            
            if [ $SEND_STATUS -eq 0 ]; then
                cylc message -- "sender:succeeded"
            fi
            
            # Exit with send status
            exit ${SEND_STATUS}
        """
        [[[directives]]]
            --job-name = cpu-emu-send
            --cpus-per-task = 4
            --mem = 8G 