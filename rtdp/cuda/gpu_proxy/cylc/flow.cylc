[scheduler]
    allow implicit tasks = True
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            # Start chain
            receiver:ready => gpu_proxy:ready => sender
            
            # Completion chain (separate from start chain)
            sender:succeeded => !receiver
            receiver:completed
        """

[runtime]
    [[root]]
        # Common settings for all tasks
        platform = jlab_slurm
        [[[job]]]
            execution time limit = PT2H    # 2 hours timeout
        
        [[[directives]]]
            --ntasks = 1
            --partition = ifarm
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            # Path to SIF file
            SIF_FILE = "$CYLC_WORKFLOW_RUN_DIR/sifs/gpu-proxy.sif"
            
            # Network configuration
            IN_PORT = "55555"
            OUT_PORT = "55556"
            # NIC and GPU_NIC are optional - if not provided, use default interface
            NIC = "${NIC:-$(ip route | grep default | awk '{print $5}')}"        # Default to system's default interface
            GPU_NIC = "${GPU_NIC:-$(ip route | grep default | awk '{print $5}')}"    # Default to system's default interface
            
            # Matrix configuration
            MATRIX_WIDTH = "2048"  # GPU input matrix column size
            SEND_RATE = "150"      # Target send rate in MB/s (testing fixed rate control)
            GROUP_SIZE = "30720000"    # Group size to achieve 150 MB/s (30720000 * 4 bytes = 150 MB)
            PROXY_RATE = "1.0"     # Proxy processing rate (1.0 means no throttling)
            SEND_ALL_ONES = "0"    # Set to 1 to send all ones, 0 for random values
            
            # Directory paths
            OUTPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_SHARE_DIR/logs"

    [[receiver]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/receiver

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/receiver/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/receiver/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - NIC: ${NIC}"
            echo "  - OUT_PORT: ${OUT_PORT}"
            echo "  - OUTPUT_DIR: ${OUTPUT_DIR}"
            echo "  - LOG_DIR: ${LOG_DIR}"
            
            # Check if port is already in use
            if netstat -tuln | grep -q ":${OUT_PORT}"; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Port ${OUT_PORT} is already in use" >&2
                netstat -tuln | grep ":${OUT_PORT}" >&2
                exit 1
            fi
            
            # Store hostname for other tasks
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Recording hostname information"
            HOSTNAME=$(hostname -f)  # Use fully qualified hostname
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/receiver_hostname
            IP=$(ip addr show ${NIC} | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)  # Get IP from specified NIC
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/receiver_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP)"
            
            # Create output directory
            mkdir -p ${OUTPUT_DIR}
            
            # Start receiver with verbose output
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver process"
            apptainer run ${SIF_FILE} receiver -v > ${OUTPUT_DIR}/received_data.bin 2>${LOG_DIR}/receiver/apptainer.log &
            
            RECV_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver started with PID ${RECV_PID}"
            
            # Brief pause to let process start
            sleep 2
            
            # Signal readiness if process is running
            if kill -0 $RECV_PID 2>/dev/null; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
                cylc message "ready"
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver process not running" >&2
                cat ${LOG_DIR}/receiver/apptainer.log >&2
                exit 1
            fi
            
            # Create a flag file to indicate we should keep running
            KEEP_RUNNING=1
            trap 'KEEP_RUNNING=0' TERM INT
            
            # Create a flag file to track completion
            COMPLETION_FILE="${CYLC_WORKFLOW_SHARE_DIR}/receiver_complete"
            rm -f "${COMPLETION_FILE}"
            
            # Initialize file size tracking
            PREV_SIZE=0
            if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                PREV_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
            fi
            
            # Monitor the receiver process
            while [ $KEEP_RUNNING -eq 1 ] && kill -0 $RECV_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver process is running (PID: $RECV_PID)"
                echo "Process details:" >> ${LOG_DIR}/receiver/process.log
                ps -fp $RECV_PID >> ${LOG_DIR}/receiver/process.log 2>&1 || true
                
                # Check if data has been received by monitoring file size changes
                CURRENT_SIZE=0
                if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                    CURRENT_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
                fi
                
                if [ $CURRENT_SIZE -gt $PREV_SIZE ] && [ ! -f "${COMPLETION_FILE}" ]; then
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Data received successfully (size: $CURRENT_SIZE bytes)"
                    echo "Transfer completed successfully"
                    cylc message -- "Transfer completed successfully"
                    touch "${COMPLETION_FILE}"
                fi
                
                PREV_SIZE=$CURRENT_SIZE
                sleep 5
            done
            
            # Check final status
            FINAL_SIZE=0
            if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                FINAL_SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
            fi
            
            if [ $FINAL_SIZE -gt 0 ]; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Transfer completed successfully (final size: $FINAL_SIZE bytes)"
                exit 0
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Transfer failed or incomplete" >&2
                echo "Last few lines of apptainer log:" >&2
                tail -n 20 ${LOG_DIR}/receiver/apptainer.log >&2
                exit 1
            fi
        """
        [[[directives]]]
            --job-name = receiver
            --cpus-per-task = 4
            --mem = 8G
        
        [[[outputs]]]
            ready = "ready"
            completed = "Transfer completed successfully"

    [[gpu_proxy]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/proxy

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/proxy/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/proxy/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting GPU proxy task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - GPU_NIC: ${GPU_NIC}"
            echo "  - IN_PORT: ${IN_PORT}"
            echo "  - OUT_PORT: ${OUT_PORT}"
            echo "  - MATRIX_WIDTH: ${MATRIX_WIDTH}"
            echo "  - PROXY_RATE: ${PROXY_RATE}"
            echo "  - OUTPUT_DIR: ${OUTPUT_DIR}"
            echo "  - LOG_DIR: ${LOG_DIR}"
            
            # Get receiver information
            RECV_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/receiver_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver IP: ${RECV_IP}"
            
            # Store hostname for sender
            HOSTNAME=$(hostname)
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/proxy_hostname
            IP=$(ip addr show ${GPU_NIC} | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)  # Get IP from GPU NIC
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/proxy_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP) using NIC ${GPU_NIC}"
            
            # Create output directory
            mkdir -p ${OUTPUT_DIR}
            
            # Start GPU proxy with test mode and matrix width configuration
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting GPU proxy"
            apptainer run --nv ${SIF_FILE} proxy \
                --in-port ${IN_PORT} \
                --out-ip ${RECV_IP} \
                --out-port ${OUT_PORT} \
                -t \
                -w ${MATRIX_WIDTH} \
                -r ${PROXY_RATE} \
                2>${LOG_DIR}/proxy/apptainer.log &
            
            PROXY_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] GPU proxy started with PID ${PROXY_PID}"
            
            # Brief pause to let process start
            sleep 2
            
            # Signal readiness if process is running
            if kill -0 $PROXY_PID 2>/dev/null; then
                cylc message "ready"
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: GPU proxy process not running" >&2
                cat ${LOG_DIR}/proxy/apptainer.log >&2
                exit 1
            fi
            
            # Monitor memory usage
            while kill -0 $PROXY_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Memory usage:" >> ${LOG_DIR}/proxy/memory.log
                free -h >> ${LOG_DIR}/proxy/memory.log
                ps -o pid,ppid,%cpu,%mem,cmd -p $PROXY_PID >> ${LOG_DIR}/proxy/memory.log
                sleep 5
            done
            
            # Check if process died unexpectedly
            if ! wait $PROXY_PID; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: GPU proxy process failed" >&2
                cat ${LOG_DIR}/proxy/apptainer.log >&2
                exit 1
            fi
        """
        [[[directives]]]
            --job-name = proxy
            --partition = gpu
            --gres = gpu:A100:1
            --mem = 100G
            --cpus-per-task = 4
        
        [[[outputs]]]
            ready = "ready"

    [[sender]]
        script = """
            # Create log directory
            mkdir -p ${LOG_DIR}/sender

            # Redirect all output to log files
            exec 1> >(tee -a "${LOG_DIR}/sender/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/sender/stderr.log")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting sender task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - NIC: ${NIC}"
            echo "  - IN_PORT: ${IN_PORT}"
            echo "  - SEND_RATE: ${SEND_RATE} MB/s"
            echo "  - GROUP_SIZE: ${GROUP_SIZE}"
            echo "  - SEND_ALL_ONES: ${SEND_ALL_ONES}"
            echo "  - INPUT_DIR: ${INPUT_DIR}"
            echo "  - LOG_DIR: ${LOG_DIR}"
            
            # Get proxy information
            PROXY_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/proxy_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Sending data to ${PROXY_IP}:${IN_PORT} (using NIC ${NIC})"
            
            # Create input directory
            mkdir -p ${INPUT_DIR}
            
            # Send data with rate control and group size
            apptainer run ${SIF_FILE} sender \
                -a ${PROXY_IP} \
                -r ${SEND_RATE} \
                --group-size ${GROUP_SIZE} \
                ${SEND_ALL_ONES:+--all-ones} \
                2>${LOG_DIR}/sender/apptainer.log
            
            SEND_STATUS=$?
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Send completed with status: ${SEND_STATUS}"
            
            if [ $SEND_STATUS -eq 0 ]; then
                cylc message -- "sender:succeeded"
            fi
            
            # Exit with send status
            exit ${SEND_STATUS}
        """
        [[[directives]]]
            --job-name = sender
            --cpus-per-task = 4
            --mem = 8G