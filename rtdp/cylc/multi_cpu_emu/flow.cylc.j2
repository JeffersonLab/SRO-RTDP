{# Multi-CPU Emulator Cylc Workflow Template #}
[scheduler]
    allow implicit tasks = True
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            # Dependency chain (reverse of data flow): receiver => emulator_N => emulator_N-1 => ... => emulator_0 => sender
            receiver:ready => emulator_{{ cpu_emulators|length - 1 }}:ready
            {% for i in range(cpu_emulators|length - 1, 0, -1) %}
            emulator_{{ i }}:ready => emulator_{{ i-1 }}:ready
            {% endfor %}
            emulator_0:ready => sender

            # Completion chain
            #sender:completed => !receiver
            #receiver:completed
            #{% for emu in cpu_emulators %}
            #    emulator_{{ loop.index0 }}:completed
            #{% endfor %}
        """

[runtime]
    [[root]]
        platform = {{ platform.name | default('jlab_slurm') }}
        [[[job]]]
            execution time limit = PT2H
        [[[directives]]]
            --ntasks = 1
            --partition = {{ partition | default('ifarm') }}
            --output = slurm_%j.log
            --error = slurm_%j.log
        [[[environment]]]
            # Path to SIF file
            SIF_FILE = "$CYLC_WORKFLOW_RUN_DIR/sifs/{{ containers.image_path | default('cpu-emu.sif') }}"
            
            # Port configuration
            SEND_PORT = "{{ sender.target_port }}"
            RECV_PORT = "{{ receiver.listen_port }}"
            
            # Directory paths
            OUTPUT_DIR = "$CYLC_WORKFLOW_RUN_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_RUN_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_RUN_DIR/logs"
            DATA_DIR = "$CYLC_WORKFLOW_RUN_DIR/data"
            CONSOLIDATED_LOG = "$CYLC_WORKFLOW_RUN_DIR/consolidated.log"

    [[sender]]
        script = """
            #!/bin/bash
            set -e
            
            # Set sender-specific environment variables from config
            {% if sender.avg_rate is defined %}
            AVG_RATE="{{ sender.avg_rate }}"
            {% else %}
            AVG_RATE="50"
            {% endif %}
            
            {% if sender.rms_fraction is defined %}
            RMS_FRACTION="{{ sender.rms_fraction }}"
            {% else %}
            RMS_FRACTION="0.3"
            {% endif %}
            
            {% if sender.duty_cycle is defined %}
            DUTY_CYCLE="{{ sender.duty_cycle }}"
            {% else %}
            DUTY_CYCLE="0.7"
            {% endif %}
            
            {% if sender.nic_limit is defined %}
            NIC_LIMIT="{{ sender.nic_limit }}"
            {% else %}
            NIC_LIMIT="100"
            {% endif %}
            
            mkdir -p ${LOG_DIR}/sender
            exec 1> >(tee -a "${LOG_DIR}/sender/stdout.log" "${CONSOLIDATED_LOG}")
            exec 2> >(tee -a "${LOG_DIR}/sender/stderr.log" "${CONSOLIDATED_LOG}")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting sender task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - SEND_PORT: ${SEND_PORT}"
            echo "  - AVG_RATE: ${AVG_RATE} Mbps"
            echo "  - RMS_FRACTION: ${RMS_FRACTION}"
            echo "  - DUTY_CYCLE: ${DUTY_CYCLE}"
            echo "  - NIC_LIMIT: ${NIC_LIMIT} Gbps"
            echo "  - INPUT_DIR: ${INPUT_DIR}"
            echo "  - LOG_DIR: ${LOG_DIR}"

            # Create input directory
            mkdir -p ${INPUT_DIR}

            # Signal ready state immediately (sender doesn't need to wait for emulator IP)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
            cylc message "ready"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"

            # Wait for first emulator to be ready and get its IP
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Waiting for first emulator to be ready..."
            while [ ! -f "$CYLC_WORKFLOW_SHARE_DIR/emulator_0_ip" ]; do
                sleep 1
            done

            EMULATOR_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/emulator_0_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Sending data to ${EMULATOR_IP}:${SEND_PORT}"

            # Send data with apptainer output piped to consolidated log with timestamps
            apptainer run --pwd /app ${SIF_FILE} sender \
                --host ${EMULATOR_IP} \
                --port ${SEND_PORT} \
                --avg-rate-mbps ${AVG_RATE} \
                --rms-fraction ${RMS_FRACTION} \
                --duty-cycle ${DUTY_CYCLE} \
                --nic-limit-gbps ${NIC_LIMIT} \
                2>&1 | while IFS= read -r line; do
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] $line" >> "${CONSOLIDATED_LOG}"
                done

            SEND_STATUS=${PIPESTATUS[0]}
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Send completed with status: ${SEND_STATUS}"

            if [ $SEND_STATUS -eq 0 ]; then
                cylc message -- "sender:completed"
            fi

            exit ${SEND_STATUS}
        """
        [[[directives]]]
            --job-name = sender
            --cpus-per-task = 4
            --mem = 8G
        [[[outputs]]]
            ready = "ready"
            completed = "Send completed successfully"

    {% for emu in cpu_emulators %}
    [[emulator_{{ loop.index0 }}]]
        script = """
            #!/bin/bash
            set -e
            
            # Set emulator-specific environment variables from config
            IN_PORT="{{ emu.in_port }}"
            OUT_PORT="{{ emu.out_port }}"
            {% if emu.nic is defined %}
            EMULATOR_NIC="{{ emu.nic }}"
            {% else %}
            # Auto-detect the default network interface
            EMULATOR_NIC="$(ip route | grep default | awk '{print $5}' | head -n1)"
            {% endif %}
            
            # Emulator-specific processing parameters
            {% if emu.threads is defined %}
            NUM_THREADS="{{ emu.threads }}"
            {% else %}
            NUM_THREADS="1"
            {% endif %}
            
            {% if emu.latency is defined %}
            LATENCY="{{ emu.latency }}"
            {% else %}
            LATENCY="100"
            {% endif %}
            
            {% if emu.mem_footprint is defined %}
            MEM_FOOTPRINT="{{ emu.mem_footprint }}"
            {% else %}
            MEM_FOOTPRINT="0.01"
            {% endif %}
            
            {% if emu.output_size is defined %}
            OUTPUT_SIZE="{{ emu.output_size }}"
            {% else %}
            OUTPUT_SIZE="0.001"
            {% endif %}
            
            {% if emu.sleep_time is defined %}
            SLEEP_TIME="{{ emu.sleep_time }}"
            {% else %}
            SLEEP_TIME="0"
            {% endif %}
            
            mkdir -p ${LOG_DIR}/emulator_{{ loop.index0 }}
            exec 1> >(tee -a "${LOG_DIR}/emulator_{{ loop.index0 }}/stdout.log" "${CONSOLIDATED_LOG}")
            exec 2> >(tee -a "${LOG_DIR}/emulator_{{ loop.index0 }}/stderr.log" "${CONSOLIDATED_LOG}")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting CPU emulator task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - EMULATOR_NIC: ${EMULATOR_NIC}"
            echo "  - IN_PORT: ${IN_PORT}"
            echo "  - OUT_PORT: ${OUT_PORT}"
            echo "  - NUM_THREADS: ${NUM_THREADS}"
            echo "  - LATENCY: ${LATENCY}"
            echo "  - MEM_FOOTPRINT: ${MEM_FOOTPRINT}"
            echo "  - OUTPUT_SIZE: ${OUTPUT_SIZE}"
            echo "  - SLEEP_TIME: ${SLEEP_TIME}"
            echo "  - LOG_DIR: ${LOG_DIR}/emulator_{{ loop.index0 }}"

            # Store this emulator's hostname and IP for previous component
            HOSTNAME=$(hostname)
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/emulator_{{ loop.index0 }}_hostname
            # Get the first non-loopback IPv4 address for the NIC
            IP=$(ip addr show ${EMULATOR_NIC} | grep 'inet ' | grep -v '127.0.0.1' | head -n1 | awk '{print $2}' | cut -d/ -f1)
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/emulator_{{ loop.index0 }}_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP) using NIC ${EMULATOR_NIC}"

            # Create output directory
            mkdir -p ${OUTPUT_DIR}

            # Determine next component's IP and port (in data flow direction)
            {% if loop.index0 == cpu_emulators|length - 1 %}
            # Last emulator in dependency chain (emulator_N) connects to receiver
            NEXT_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/receiver_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Connecting to receiver at ${NEXT_IP}:${OUT_PORT}"
            {% else %}
            # Connect to the emulator that starts after this one in dependency chain
            # For emulator_i, connect to emulator_{i+1} which starts after emulator_i
            NEXT_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/emulator_{{ loop.index0 + 1 }}_ip)
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Connecting to emulator_{{ loop.index0 + 1 }} at ${NEXT_IP}:${OUT_PORT}"
            {% endif %}

            # Start CPU emulator with output piped to consolidated log with timestamps
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting CPU emulator"
            apptainer run --pwd /app ${SIF_FILE} emulator \
                -i ${NEXT_IP} \
                -r ${IN_PORT} \
                -p ${OUT_PORT} \
                -s \
                -x \
                -v 1 \
                -m ${MEM_FOOTPRINT} \
                -t ${NUM_THREADS} \
                -b ${LATENCY} \
                2>&1 | while IFS= read -r line; do
                    echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] $line" >> "${CONSOLIDATED_LOG}"
                done &
            EMU_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] CPU emulator started with PID ${EMU_PID}"

            # Brief pause to let process start
            sleep 2

            # Signal readiness if process is running
            if kill -0 $EMU_PID 2>/dev/null; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
                cylc message "ready"
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: CPU emulator process not running" >&2
                exit 1
            fi

            # Create a flag file to indicate we should keep running
            KEEP_RUNNING=1
            trap 'KEEP_RUNNING=0' TERM INT

            # Monitor the emulator process
            while [ $KEEP_RUNNING -eq 1 ] && kill -0 $EMU_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] CPU emulator process is running (PID: $EMU_PID)" >> ${LOG_DIR}/emulator_{{ loop.index0 }}/process.log
                sleep 5
            done

            # Check if process died unexpectedly
            if ! wait $EMU_PID; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: CPU emulator process failed" >&2
                exit 1
            fi

            cylc message -- "emulator_{{ loop.index0 }}:completed"
        """
        [[[directives]]]
            --job-name = emulator_{{ loop.index0 }}
            --cpus-per-task = {{ emu.cpus | default('8') }}
            --mem = {{ emu.mem | default('16G') }}
            --nodes = 1
            {% if emu.nodelist is defined %}
            --nodelist = {{ emu.nodelist }}
            {% endif %}
        [[[outputs]]]
            ready = "ready"
            completed = "Emulator processing completed"
    {% endfor %}

    [[receiver]]
        script = """
            #!/bin/bash
            set -e
            
            mkdir -p ${LOG_DIR}/receiver
            exec 1> >(tee -a "${LOG_DIR}/receiver/stdout.log" "${CONSOLIDATED_LOG}")
            exec 2> >(tee -a "${LOG_DIR}/receiver/stderr.log" "${CONSOLIDATED_LOG}")

            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver task"
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Configuration Parameters:"
            echo "  - SIF_FILE: ${SIF_FILE}"
            echo "  - RECV_PORT: ${RECV_PORT}"
            echo "  - LOG_DIR: ${LOG_DIR}"

            # Store hostname and IP for last emulator
            HOSTNAME=$(hostname -f)
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/receiver_hostname
            # Auto-detect the default network interface
            RECEIVER_NIC="$(ip route | grep default | awk '{print $5}' | head -n1)"
            # Get the first non-loopback IPv4 address for the NIC
            IP=$(ip addr show ${RECEIVER_NIC} | grep 'inet ' | grep -v '127.0.0.1' | head -n1 | awk '{print $2}' | cut -d/ -f1)
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/receiver_ip
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Running on host: $HOSTNAME ($IP) using NIC ${RECEIVER_NIC}"

            # Start receiver with output piped to consolidated log with timestamps
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Starting receiver process"
            apptainer run --pwd /app ${SIF_FILE} receiver -z -i ${IP} -r ${RECV_PORT} -p ${RECV_PORT} -v 1 2>&1 | while IFS= read -r line; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] $line" >> "${CONSOLIDATED_LOG}"
            done &
            RECV_PID=$!
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver started with PID ${RECV_PID}"

            # Brief pause to let process start
            sleep 2

            # Signal readiness if process is running
            if kill -0 $RECV_PID 2>/dev/null; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Signaling ready state"
                cylc message "ready"
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Ready message sent"
            else
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver process not running" >&2
                exit 1
            fi

            # Create a flag file to indicate we should keep running
            KEEP_RUNNING=1
            trap 'KEEP_RUNNING=0' TERM INT

            # Monitor the receiver process and log received data information
            while [ $KEEP_RUNNING -eq 1 ] && kill -0 $RECV_PID 2>/dev/null; do
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver process is running (PID: $RECV_PID)"
                sleep 5
            done

            # Check if process died unexpectedly
            if ! wait $RECV_PID; then
                echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] ERROR: Receiver process failed" >&2
                exit 1
            fi

            # Log final received data summary
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Receiver completed successfully" >> ${LOG_DIR}/receiver/stdout.log
            echo "[$(date -u '+%Y-%m-%dT%H:%M:%SZ')] Final receiver statistics:" >> ${LOG_DIR}/receiver/stdout.log

            cylc message -- "receiver:completed"
        """
        [[[directives]]]
            --job-name = receiver
            --cpus-per-task = 4
            --mem = 8G
        [[[outputs]]]
            ready = "ready"
            completed = "Transfer completed successfully" 