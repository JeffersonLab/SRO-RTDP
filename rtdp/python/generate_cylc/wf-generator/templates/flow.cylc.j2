[scheduler]
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            {{ config.edges|generate_graph }}
        """

[runtime]
    [[root]]
        platform = {{ config.platform.name }}
        [[[job]]]
            execution time limit = PT2H
        
        [[[directives]]]
            --ntasks = 1
            {% set receiver = namespace(partition=None) %}
            {% for component in config.components.values() %}
                {% if component.type == "receiver" and not receiver.partition %}
                    {% set receiver.partition = component.resources.partition %}
                {% endif %}
            {% endfor %}
            --partition = {{ receiver.partition }}
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            CPU_EMU_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/{{ config.containers.image_path }}"
            OUTPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_SHARE_DIR/logs"

    {% for component_id, component in config.components.items() %}
    [[{{ component_id }}]]
        script = """
            # Setup directories
            mkdir -p ${OUTPUT_DIR}
            mkdir -p ${INPUT_DIR}
            mkdir -p ${LOG_DIR}/{{ component_id }}
            exec 1> >(tee -a "${LOG_DIR}/{{ component_id }}/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/{{ component_id }}/stderr.log")

            # Store hostname for other tasks
            HOSTNAME=$(hostname -f)
            IP=$(hostname -i | awk '{print $1}')
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_hostname
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_ip

            {% if component.type == "receiver" %}
            # Start receiver
            apptainer run --bind ${OUTPUT_DIR}:/output \
                ${CPU_EMU_SIF} receive \
                {{ component.network.listen_port }} \
                "{{ component.network.bind_address }}" > ${OUTPUT_DIR}/received_data.bin 2>${LOG_DIR}/{{ component_id }}/apptainer.log &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                
                # Monitor until completion
                while kill -0 $PROC_PID 2>/dev/null; do
                    if [ -f "${OUTPUT_DIR}/received_data.bin" ]; then
                        SIZE=$(stat -c %s "${OUTPUT_DIR}/received_data.bin" || echo 0)
                        if [ $SIZE -gt 0 ]; then
                            cylc message -- "Transfer completed successfully"
                            exit 0
                        fi
                    fi
                    sleep 5
                done
            fi
            exit 1

            {% elif component.type == "emulator" %}
            # Find data target from edges
            {% for edge in config.edges %}
                {% if edge.from == component_id %}
                    {% set target_id = edge.to %}
                    # Connect to {{ target_id }}
                    TARGET_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/{{ target_id }}_ip)
                    TARGET_PORT={{ config.components[target_id].network.listen_port }}
                    break
                {% endif %}
            {% endfor %}
            
            # Start emulator
            apptainer run --bind ${OUTPUT_DIR}:/output \
                ${CPU_EMU_SIF} --output-dir /output \
                -t {{ component.configuration.threads }} \
                -b {{ component.configuration.latency }} \
                -m {{ component.configuration.mem_footprint }} \
                -o {{ component.configuration.output_size }} \
                -r {{ component.network.listen_port }} \
                -p ${TARGET_PORT} \
                -i ${TARGET_IP} -v 1 &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1

            {% elif component.type == "sender" %}
            # Find data target from edges
            {% for edge in config.edges %}
                {% if edge.from == component_id %}
                    {% set target_id = edge.to %}
                    # Connect to {{ target_id }}
                    TARGET_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/{{ target_id }}_ip)
                    TARGET_PORT={{ config.components[target_id].network.listen_port }}
                    break
                {% endif %}
            {% endfor %}
            
            # Generate and send data
            dd if=/dev/urandom bs={{ component.test_data.size }} count=1 of=${INPUT_DIR}/data.bin 2>/dev/null
            
            apptainer run --bind ${INPUT_DIR}:/data \
                ${CPU_EMU_SIF} send \
                "/data/data.bin" \
                ${TARGET_IP} \
                ${TARGET_PORT}
            
            STATUS=$?
            rm -f ${INPUT_DIR}/data.bin
            
            if [ $STATUS -eq 0 ]; then
                cylc message -- "sender:succeeded"
            fi
            exit $STATUS
            {% endif %}
        """
        [[[directives]]]
            --job-name = cpu-emu-{{ component_id }}
            --cpus-per-task = {{ component.resources.cpus_per_task }}
            --mem = {{ component.resources.mem }}
        
        [[[outputs]]]
            {% if component.type == "receiver" %}
            ready = "ready"
            completed = "Transfer completed successfully"
            {% else %}
            ready = "ready"
            {% endif %}

    {% endfor %} 