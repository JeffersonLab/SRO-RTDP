[scheduler]
    UTC mode = True

[scheduling]
    cycling mode = integer
    initial cycle point = 1
    final cycle point = 1

    [[graph]]
        R1 = """
            {{ config.edges|generate_graph }}
        """

[runtime]
    [[root]]
        platform = {{ config.platform.name }}
        [[[job]]]
            execution time limit = PT2H
        
        [[[directives]]]
            --ntasks = 1
            {% set receiver = namespace(partition=None) %}
            {% for component in config.components.values() %}
                {% if component.type == "receiver" and not receiver.partition %}
                    {% set receiver.partition = component.resources.partition %}
                {% endif %}
            {% endfor %}
            --partition = {{ receiver.partition }}
            --output = slurm_%j.log
            --error = slurm_%j.log
        
        [[[environment]]]
            CPU_EMU_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/{{ config.containers.images|selectattr('name', 'equalto', 'cpu-emu')|first|attr('path') }}"
            RTDP_COMPONENTS_SIF = "$CYLC_WORKFLOW_RUN_DIR/sifs/{{ config.containers.images|selectattr('name', 'equalto', 'rtdp-components')|first|attr('path') }}"
            OUTPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/output"
            INPUT_DIR = "$CYLC_WORKFLOW_SHARE_DIR/input"
            LOG_DIR = "$CYLC_WORKFLOW_SHARE_DIR/logs"

    {% for component_id, component in config.components.items() %}
    [[{{ component_id }}]]
        script = """
            # Setup directories
            mkdir -p ${OUTPUT_DIR}
            mkdir -p ${INPUT_DIR}
            mkdir -p ${LOG_DIR}/{{ component_id }}
            exec 1> >(tee -a "${LOG_DIR}/{{ component_id }}/stdout.log")
            exec 2> >(tee -a "${LOG_DIR}/{{ component_id }}/stderr.log")

            # Store hostname for other tasks
            HOSTNAME=$(hostname -f)
            IP=$(hostname -i | awk '{print $1}')
            echo "$HOSTNAME" > $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_hostname
            echo "$IP" > $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_ip

            {% if component.type == "receiver" %}
            # Start receiver
            apptainer run --bind ${OUTPUT_DIR}:/data \
                ${RTDP_COMPONENTS_SIF} {{ component.container.command }} \
                --config $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_config.yml &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1

            {% elif component.type == "emulator" %}
            # Find data target from edges
            {% set target = namespace(id=None) %}
            {% for edge in config.edges %}
                {% if edge.from == component_id %}
                    {% set target.id = edge.to %}
                {% endif %}
            {% endfor %}
            # Connect to {{ target.id }}
            TARGET_IP=$(cat $CYLC_WORKFLOW_SHARE_DIR/{{ target.id }}_ip)
            TARGET_PORT={{ config.components[target.id].network.listen_port }}

            # Start emulator with YAML configuration
            apptainer run --bind ${OUTPUT_DIR}:/output \
                ${CPU_EMU_SIF} {{ component.container.command }} \
                -y $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_config.yml &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1

            {% elif component.type == "sender" %}
            # Start sender
            apptainer run --bind ${INPUT_DIR}:/data \
                ${RTDP_COMPONENTS_SIF} {{ component.container.command }} \
                --config $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_config.yml &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1

            {% elif component.type == "load_balancer" %}
            # Start load balancer
            apptainer run --bind ${OUTPUT_DIR}:/data \
                ${RTDP_COMPONENTS_SIF} {{ component.container.command }} \
                --config $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_config.yml &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1

            {% elif component.type == "aggregator" %}
            # Start aggregator
            apptainer run --bind ${OUTPUT_DIR}:/data \
                ${RTDP_COMPONENTS_SIF} {{ component.container.command }} \
                --config $CYLC_WORKFLOW_SHARE_DIR/{{ component_id }}_config.yml &
            
            PROC_PID=$!
            sleep 2
            
            # Signal readiness and monitor
            if kill -0 $PROC_PID 2>/dev/null; then
                cylc message "ready"
                wait $PROC_PID
                exit $?
            fi
            exit 1
            {% endif %}
        """
        [[[directives]]]
            --job-name = rtdp-{{ component_id }}
            --cpus-per-task = {{ component.resources.cpus_per_task }}
            --mem = {{ component.resources.mem }}
        
        [[[outputs]]]
            ready = "ready"

    {% endfor %} 