plugins {
    id 'java-library'
    id 'application'
}

group = 'org.jlab.ersap.actor'
version = '1.0-SNAPSHOT'

repositories {
    maven {
        url 'https://clasweb.jlab.org/clas12maven/'
    }
    mavenCentral()
}

dependencies {
    // ERSAP dependencies
    implementation files('/workspace/src/utilities/java/ersapActors/ersap-java/build/libs/ersap-java-1.0-SNAPSHOT.jar')
    implementation 'org.json:json:20210307'
    
    // LMAX Disruptor for high-performance event processing
    implementation 'com.lmax:disruptor:3.4.4'
    
    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

// Include scripts directory in the source sets
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', 'scripts']
        }
    }
}

// Set the main class for running the ERSAP source engine
application {
    mainClass = 'org.jlab.ersap.actor.pcap.engine.PcapStreamSourceEngine'
}

// Task to run the ERSAP source engine
task runSourceEngine(type: JavaExec) {
    group = 'application'
    description = 'Runs the ERSAP source engine'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = application.mainClass
    
    // Default arguments (can be overridden from command line)
    args = ['localhost', '5000']
    
    // Allow passing arguments from command line
    if (project.hasProperty('host')) {
        args[0] = project.getProperty('host')
    }
    
    if (project.hasProperty('port')) {
        args[1] = project.getProperty('port')
    }
}

// Task to run a simple test client
task runTest(type: JavaExec) {
    group = 'application'
    description = 'Runs a simple test client'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'org.jlab.ersap.actor.pcap.source.PcapStreamTest'
    
    // Default arguments (can be overridden from command line)
    args = ['localhost', '5000']
    
    // Allow passing arguments from command line
    if (project.hasProperty('host')) {
        args[0] = project.getProperty('host')
    }
    
    if (project.hasProperty('port')) {
        args[1] = project.getProperty('port')
    }
}

// Task to run the MockPcapServer
task runMockServer(type: JavaExec) {
    group = 'application'
    description = 'Runs the MockPcapServer'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'scripts.MockPcapServer'
    
    // Default arguments (can be overridden from command line)
    args = ['test-data/example.pcap', '9000']
    
    // Allow passing arguments from command line
    if (project.hasProperty('pcapFile')) {
        args[0] = project.getProperty('pcapFile')
    }
    
    if (project.hasProperty('port')) {
        args[1] = project.getProperty('port')
    }
}

// Task to run the TestMultiSocketClient
task runMultiSocketTest(type: JavaExec) {
    group = 'application'
    description = 'Runs the TestMultiSocketClient'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'scripts.TestMultiSocketClient'
    
    // Default arguments (can be overridden from command line)
    args = ['test-data/multi-socket-config.json']
    
    // Allow passing arguments from command line
    if (project.hasProperty('configFile')) {
        args[0] = project.getProperty('configFile')
    }
} 